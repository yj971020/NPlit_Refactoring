<!-- <?xml version="1.0" encoding="UTF-8" ?>
mapper DTD 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.nplit.mapper.UserMapper">
     
    <!--
        login에 대한 DB 작업을 정의한다. id와 pw가 일치하면 사용자 정보를 담고 있는 객체를 반환한다.
     -->
    <select id="login" resultType="com.nplit.vo.MemberVO">
        select * from nplit.member where memberId = #{memberId} and password = #{password}
    </select>
    
    <!--로그인 회원정보 불러오기  -->
    <select id="LoginInfo" resultType="com.nplit.vo.MemberVO">
        select * from nplit.member where memberId = #{memberId}
    </select>
     
    <!--
        로그인된 경우 해당 세션id와 유효시간을 사용자 테이블에 세팅한다.
     -->
    <update id="keepLogin">
        update member set sessionKey = #{sessionId}, sessionLimit = #{next} where memberId=#{memberId}
    </update>
     
    <!--
        유효기간이 남아 있으면서 해당 sessionId를 가지는 사용자 정보를 꺼내오는 부분
     -->
    <select id="checkUserWithSessionKey" resultType="com.nplit.vo.MemberVO">
        select * from member where sessionKey = #{sessionId} and sessionLimit > now()
    </select>
    
    <!-- 회원가입 -->
      <insert id="join" parameterType="com.nplit.vo.MemberVO">
      INSERT INTO MEMBER
         (
         name,
         memberId,
         password,
         oldPassword,
         nickname,
         email,
         phone,
         address,
         role
         )
      VALUES
         (
         #{name},
         #{memberId},
         #{password},
         #{oldPassword},
         #{nickname},
         #{email},
         #{phone},
         #{address},
         '0'
                         
         )
   </insert>

    <!-- 회원정보 수정 -->
    <update id="profileUpdate">
        update member set nickname=#{nickname}, phone=#{phone}, 
        email=#{email}, address=#{address}, proMsg=#{proMsg}, filePath=#{filePath}, fileName=#{fileName}, fullFilePath=#{fullFilePath}
        where memberId=#{memberId}
    </update>
    
    <!-- 비밀번호 수정 -->
    <update id="pwdUpdate">
        update member set password=#{oldPassword}
        where memberId=#{memberId}
    </update>
    
    
    <!-- 회원탈퇴 -->
    <delete id="memberDelete">
       delete from member WHERE memberId = #{memberId}
    </delete>
    
    <!-- 비밀번호 변경 -->
     <update id="updatePw" >
        update member set password = #{password} where memberId = #{memberId}
     </update>
    
   <!-- ******** 예진 중복 체크 ****** -->
   <!-- 아이디 중복 체크 -->
   <select resultType="int" id="idChk">
      select count(*)
      from member
      where memberId=#{memberId}
   </select>
   
   <!-- 예진 닉네임 중복체크  -->
   <select resultType="int" id="nicknameChk">
      select count(*)
      from member where nickname=#{nickname}
   </select>
   
   <!--  로그인 체크-->
    <select resultType="int" id="loginChk">
      select count(*)
      from member
      where memberId=#{memberId} and password =#{password}
   </select>
   
   <!-- 1:1 문의 등록 -->
    <insert id="question" parameterType="com.nplit.vo.QueVO">
    INSERT INTO question
       (
       writer,
       category,
       title,
       content

       )
    VALUES
       (
       #{writer},
       #{category},
       #{title},
       #{content}
                
       )
   </insert>
   
    <!-- 다른 사람 프로필 조회 -->
     <select id="selectOtherProfile" parameterType="String" resultType="com.nplit.vo.MemberVO">
     <![CDATA[
       SELECT memberid,nickname, address, name, email, fullfilepath, filepath, filename, promsg
       FROM member 
       WHERE memberId = #{memberId}      
      ]]>
    </select>
    
    
    <!-- 등록된 목록 보기 -->
   <select id="selectMyQuestion" parameterType="String" resultType="com.nplit.vo.QueVO">
      <![CDATA[
         SELECT * FROM QUESTION 
         WHERE WRITER = #{memberId}
         ORDER BY SEQ DESC  

      ]]>
   </select>
   
   
</mapper>